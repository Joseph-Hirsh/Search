import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;

public class Board {
    public int[][] board;
    public Board(int[][] tiles) {
        this.board = tiles;
    }
    public String toString() {
        StringBuilder string = new StringBuilder();
        for (int[] row: board) {
            string.append(Arrays.toString(row)).append("\n");
        }
        return string.toString();
    }
    public int dimension() {
        return board.length;
    }
    public int hamming() {
        int dimension = dimension();
        int hamming = 0;
        for (int i = 0; i < dimension; i++) {
            for (int j = 0; j < dimension; j++) {
                if (board[i][j] != 1 + j + i * dimension) {
                    hamming++;
                }
            }
        }
        return hamming - 1;
    }
    public int manhattan() {
        int dimension = dimension();
        int manhattan = 0;
        int tile;
        int[] intended = new int[2];
        for (int i = 0; i < dimension; i++) {
            for (int j = 0; j < dimension; j++) {
                tile = board[i][j] - 1;
                intended[0] = tile % dimension;
                intended[1] = tile / dimension;
                manhattan += (intended[0] - i) + (intended[1] - j);
            }
        }

        return manhattan;
    }

    public boolean isGoal() {
        return hamming() == 0;
    }

    public boolean equals(Board y) {
        return Arrays.deepEquals(board, y.board);
    }

    public Iterable<Board> neighbors() {
        int dimension = dimension();

        // this first section finds the location of the "empty square"
        int x = 0;
        int y = 0;
        for (int i = 0; i < dimension; i++) {
            for (int j = 0; j < dimension; j++) {
                if (board[i][j] == 0) {
                    x = i;
                    y = j;
                    break;
                }
            }
        }

        ArrayList<Board> neighbors = new ArrayList<>();

        int[][] adjacents = new int[][] {{x + 1, y}, {x - 1, y}, {x, y + 1}, {x, y - 1}};

        for (int[] adjacent: adjacents) {
            if (adjacent[0] < 0 || adjacent[0] >= dimension || adjacent[1] < 0 || adjacent[1] >= dimension) {
                continue;
            }
            int[][] neighbor = new int[dimension][dimension];
            for (int i = 0; i < dimension; i++) {
                for (int j = 0; j < dimension; j++) {
                    neighbor[i][j] = board[i][j];
                }
            }
            neighbor[x][y] = board[adjacent[0]][adjacent[1]];
            neighbor[adjacent[0]][adjacent[1]] = 0;
            neighbors.add(new Board(neighbor));
        }

        return neighbors;
    }

    public Board twin() {
        int dimension = dimension();
        int[][] newBoard = board;

        Random randomizer = new Random();

        int[] tileOneCoords = new int[] {randomizer.nextInt(dimension), randomizer.nextInt(dimension)};
        int[] tileTwoCoords = new int[] {randomizer.nextInt(dimension), randomizer.nextInt(dimension)};

        int tileOneVal = newBoard[tileOneCoords[0]][tileOneCoords[1]];
        newBoard[tileOneCoords[0]][tileOneCoords[1]] = newBoard[tileTwoCoords[0]][tileTwoCoords[1]];
        newBoard[tileTwoCoords[0]][tileTwoCoords[1]] = tileOneVal;

        return new Board(newBoard);
    }
    public static void main(String[] args) {

        int[][] array = new int[][] {{1, 3, 2}, {4, 0, 6}, {7, 8, 5}};
        Board board = new Board(array);
        System.out.println(board);
        System.out.println(board.hamming());
        Iterable<Board> list = board.neighbors();
        for (Board b : list) {
            System.out.println(b);
        }
    }
}
